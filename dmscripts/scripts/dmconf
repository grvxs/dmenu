#!/usr/bin/env bash
#
# Script name: dmconf
# Description: Choose from a list of configuration files to edit.
# Dependencies: dmenu, emacsclient
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Derek Taylor
#               Simon Ingelsson
#               HostGrady
# Usage:
# to use other editor than emacsclient set DMEDITOR accordingly
#   Example: `DMEDITOR="alacritty -e nvim" ./dmconf`

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

function get_config() {
  local loaded=0
  declare -a config_dirs=(
  "${HOME}/.config/dmscripts/config"
  "/etc/dmscripts/config"
  )
  for conf in "${config_dirs[@]}"; do
    if [[ -f ${conf} ]]; then
      echo "${conf}"
      loaded=1
      break
    fi
  done
  [[ ${loaded} -eq 0 ]] && echo "No config found" ; exit 1
}

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

# Clean options array making sure that the files exist
declare -A options_clean
  # As this is loaded from other file it is technically not defined
  # shellcheck disable=SC2154
  for i in "${!dmconf_options[@]}"; do
    [[ -f ${dmconf_options["${i}"]} ]] && options_clean["${i}"]=${dmconf_options["${i}"]}
  done

# Piping the above array (cleaned) into dmenu.
# We use "printf '%s\n'" to format the array one item to a line.
choice=$(printf '%s\n' "${!options_clean[@]}" | sort | dmenu -i -l 20 -p 'Edit config:' "$@")

# What to do when/if we choose a file to edit.
if [ "$choice" ]; then
  cfg=$(printf '%s\n' "${options_clean["${choice}"]}")
  $DMEDITOR "$cfg"

# What to do if we just escape without choosing anything.
else
    echo "Program terminated." && exit 0
fi
